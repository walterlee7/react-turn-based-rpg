{"version":3,"sources":["components/Intro.jsx","components/TitleScreen.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Intro","react_default","a","createElement","className","React","Component","TitleScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","ReactDOM","render","components_Intro","document","getElementById","setState","_this2","id","style","onClick","startGame","App","components_TitleScreen","Boolean","window","location","hostname","match","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAuCeA,mLAlCP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,sDAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,kBAGAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,iBA9BAC,IAAMC,WCkCXC,cA/BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,QAAS,GAJER,2EASfS,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAWC,SAASC,eAAe,cAEnDV,KAAKW,SAAS,CACVN,QAAS,0CAIR,IAAAO,EAAAZ,KACL,OACIX,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,gBACJxB,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAAET,QAASL,KAAKI,MAAMC,SAAWb,UAAU,SAAvD,wBACAH,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAAET,QAASL,KAAKI,MAAMC,SAAWQ,GAAG,cAC5CxB,EAAAC,EAAAC,cAAA,UAAQwB,QAAS,kBAAMH,EAAKI,aAAaxB,UAAU,gBAAnD,eAIJH,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,sBA1BEpB,IAAMC,WCQjBuB,MARf,WACI,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC2B,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNjB,IAASC,OAAOlB,EAAAC,EAAAC,cAACiC,EAAD,MAASf,SAASC,eAAe,SD2H3C,kBAAmBe,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3b274b7f.chunk.js","sourcesContent":["import React from 'react';\n\nclass Intro extends React.Component {\n\n    render() {\n        return (\n            <div className=\"intro-container\">\n                <div className=\"intro\">\n                    <div>\n                        This is where introduction will appear.\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <div>\n                        ...\n                    </div>\n                    <button className=\"intro-next\">Next</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Intro;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Intro from './Intro';\n\nclass TitleScreen extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            display: 1\n        }\n    }\n\n    startGame() {\n        ReactDOM.render(<Intro />, document.getElementById('intro-div'));\n\n        this.setState({\n            display: 'none'\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"title-screen\" >\n                <div style={{ display: this.state.display }} className=\"title\">React Turn Based RPG</div>\n                <div style={{ display: this.state.display }} id=\"start-game\">\n                    <button onClick={() => this.startGame()} className=\"start-button\">\n                        Start Game\n                    </button>\n                </div>\n                <div id='intro-div' />\n            </div>\n        );\n    }\n}\n\nexport default TitleScreen;\n","import React from 'react';\nimport './App.css';\nimport TitleScreen from './TitleScreen';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TitleScreen />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}